= Software Versions =

== Format of a version number ==
 1. A complete version number will consist of 3 parts: a major version, minor version and bugfix version.
 1. A version will be written in the form 'major.minor.bugfix' (e.g. 7.1.4).
 1. In general we will only publish the major and minor versions to a customer i.e. major.minor (e.g. 7.1).
 1. It should be possible to easily determine the complete version number from a running instance of CCC.

== Incrementing a version number ==
 1. If a release includes only bug fixes made on a branch the bug fix number should be incremented.
 1. The minor version number should be incremented to indicate that one or more new features have been added to CCC.
 1. The major version number should be incremented only when a '''significant''' number of new features have been added to CCC.
 1. When a part of a version is incremented the values for all 'sub-parts' will be reset to 0. (e.g. 7.1.4 -> 7.2'''.0''').

== Working with version numbers ==
 1. If possible we should try to avoid a part number increasing beyond the value 9. Versions such as '7.10' can be confusing for end-users because the fact that '''7.10 > 7.9''' is counter-intuitive. In case this need does arise version numbers should always be sorted using [http://www.codinghorror.com/blog/archives/001018.html natural order] (the default on most operating systems).
 1. We will not apply any special meaning to numbers (e.g. linux's odd/even strategy).
 1. We will not use any additional tokens such as 'b1' (for beta 1) or '.GA' (for an official release). A [ReleaseStrategy major/minor release] should be made when we reach the feature complete stage. Changes arising during beta testing should be treated as bug fixes and applied in the relevant branch.
 1. The latest stable release for each minor version should be documented on the StableReleases page.

== Revision numbers ==
 1. A revision number is generated each time a commit is made to svn.
 1. Each version number should correspond to a single, unique revision in svn.
 1. It may also be useful to include the corresponding revision number for a release as query-able value in the running application. This will need to be configured as part of the release process.

== Iterations ==
 1. Iterations will be versioned using a single positive integer, starting from 0.